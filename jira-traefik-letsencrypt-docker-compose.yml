# Jira with Let's Encrypt in a Docker Compose

# Vladimir Mikhalev
# callvaldemar@gmail.com
# www.heyvaldemar.com

# Install the Docker Engine by following the official guide: https://docs.docker.com/engine/install/
# Install the Docker Compose by following the official guide: https://docs.docker.com/compose/install/

# Run jira-restore-application-data.sh to restore application data if needed.
# Run jira-restore-database.sh to restore database if needed.

# Deploy Jira server with a Docker Compose using the command:
# docker-compose -f jira-traefik-letsencrypt-docker-compose.yml -p jira up -d

version: '3.8'

volumes:
  jira-data:
  jira-postgres:
  jira-data-backups:
  jira-postgres-backups:
  traefik-certificates:

services:
  postgres:
    # Image tag (replace with yours)
    image: postgres:11.10
    volumes:
      - jira-postgres:/var/lib/postgresql/data
    environment:
      # Database name (replace with yours)
      POSTGRES_DB: jiradb
      # Database user (replace with yours)
      POSTGRES_USER: jiradbuser
      # Database password (replace with yours)
      POSTGRES_PASSWORD: zkhuneTBFxpgvUrtDaKs9XG
    restart: unless-stopped

  jira:
    # Image tag (replace with yours)
    image: atlassian/jira-software:8.14-ubuntu
    volumes:
      - jira-data:/var/atlassian/application-data/jira
    environment:
      # Application memory (replace with yours)
      JVM_MINIMUM_MEMORY: 8G
      JVM_MAXIMUM_MEMORY: 8G
      # Jira URL (replace with yours)
      ATL_PROXY_NAME: jira.heyvaldemar.net
      ATL_PROXY_PORT: 443
      ATL_TOMCAT_SCHEME: https
      ATL_TOMCAT_SECURE: 'true'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - "traefik.enable=true"
      # Jira URL (replace with yours)
      - "traefik.http.routers.jira.rule=Host(`jira.heyvaldemar.net`)"
      - "traefik.http.routers.jira.service=jira"
      - "traefik.http.routers.jira.tls.certresolver=letsencrypt"
      - "traefik.http.routers.jira.entrypoints=websecure"
      - "traefik.http.services.jira.loadbalancer.passhostheader=true"
      - "traefik.http.services.jira.loadbalancer.server.port=8080"
    restart: unless-stopped
    depends_on:
      - postgres
      - traefik

  traefik:
    # Image tag (replace with yours)
    image: traefik:2.3
    command:
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
      - "--api=true"
      - "--log.level=WARN"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Email for Let's Encrypt (replace with yours)
      - "--certificatesresolvers.letsencrypt.acme.email=callvaldemar@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certificates:/etc/traefik/acme
    ports:
      - "80:80"
      - "443:443"
    labels:
      - "traefik.enable=true"
      # Traefik URL (replace with yours)
      - "traefik.http.routers.default.rule=Host(`traefik.heyvaldemar.net`)"
      - "traefik.http.routers.default.service=api@internal"
      - "traefik.http.routers.default.tls.certresolver=letsencrypt"
      - "traefik.http.routers.default.entrypoints=websecure"
      - "traefik.http.services.default.loadbalancer.passhostheader=true"
      - "traefik.http.services.default.loadbalancer.server.port=8080"
      - "traefik.http.routers.default.middlewares=authtraefik"
      # Basic Authentication for Traefik Dashboard
      # Username: traefikadmin (replace with yours)
      # Passwords must be encoded using MD5, SHA1, or BCrypt
      - "traefik.http.middlewares.authtraefik.basicauth.users=traefikadmin:$$2y$$10$$sMzJfirKC75x/hVpiINeZOiSm.Jkity9cn4KwNkRvO7hSQVFc5FLO"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    restart: unless-stopped

  backups:
    # Image tag (replace with yours)
    image: postgres:11.10
    # Database backups prune interval (replace with yours). Default is 7 days.
    # find /srv/jira-postgres/backups -type f -mtime +7 | xargs rm -f

    # Application data backups prune interval (replace with yours). Default is 7 days.
    # find /srv/jira-application-data/backups -type f -mtime +7 | xargs rm -f

    # Jira backups interval (replace with yours). Default is 1 day.
    # sleep 24h

    # Run jira-restore-application-data.sh to restore application data if needed.
    # Run jira-restore-database.sh to restore database if needed.
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(cat $$POSTGRES_PASSWORD)"
             pg_dump
             -h postgres
             -p 5432
             -d jiradb
             -U jiradbuser | gzip > /srv/jira-postgres/backups/jira-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && tar -zcpf /srv/jira-application-data/backups/jira-application-data-backup-$$(date "+%Y-%m-%d_%H-%M").tar.gz /var/atlassian/application-data/jira
             && find /srv/jira-postgres/backups -type f -mtime +7 | xargs rm -f
             && find /srv/jira-application-data/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      - jira-data:/var/atlassian/application-data/jira
      # Application data backups location
      - jira-data-backups:/srv/jira-application-data/backups
      # Database backups location
      - jira-postgres-backups:/srv/jira-postgres/backups
    environment:
      # Database password (replace with yours)
      POSTGRES_PASSWORD: zkhuneTBFxpgvUrtDaKs9XG
    restart: unless-stopped
    depends_on:
      - postgres
      - jira
